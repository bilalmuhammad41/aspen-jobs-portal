generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  name            String
  email           String           @unique
  password        String
  role            Role             @default(STAKEHOLDER)
  createdAt       DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime?        @db.Timestamptz(6)
  sessions        Session[]
  jobs            Job[]            @relation("PostedJobs")
  ownedJobs       Job[]            @relation("OwnedJobs")
  comments        Comment[]        @relation("UserComments")
  votes           Vote[]
  jobStakeholders JobStakeholder[]
}

model Session {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  expiresAt DateTime  @db.Timestamptz(6)
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime? @db.Timestamptz(6)
}

model Job {
  id              Int              @id @default(autoincrement())
  title           String
  description     String
  createdAt       DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime?        @db.Timestamptz(6)
  adminId         Int
  admin           User             @relation("PostedJobs", fields: [adminId], references: [id])
  ownerId         Int
  owner           User             @relation("OwnedJobs", fields: [ownerId], references: [id])
  comments        Comment[]        @relation("JobComments")
  votes           Vote[]
  jobStakeholders JobStakeholder[]
  upvotes         Int              @default(0)
  downvotes       Int              @default(0)
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime? @db.Timestamptz(6)
  userId    Int
  user      User      @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  jobId     Int
  job       Job       @relation("JobComments", fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Vote {
  id        Int      @id @default(autoincrement())
  voteType  VoteType
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  jobId     Int
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
}

model JobStakeholder {
  jobId  Int
  job    Job  @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([jobId, userId])
}

enum Role {
  ADMIN
  STAKEHOLDER
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}
